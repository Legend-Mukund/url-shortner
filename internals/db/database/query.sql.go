// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const add = `-- name: Add :one
INSERT INTO tiny (
    origin, short
) VALUES (
    $1, $2
)
RETURNING origin, short
`

type AddParams struct {
	Origin string
	Short  string
}

func (q *Queries) Add(ctx context.Context, arg AddParams) (Tiny, error) {
	row := q.db.QueryRowContext(ctx, add, arg.Origin, arg.Short)
	var i Tiny
	err := row.Scan(&i.Origin, &i.Short)
	return i, err
}

const getByOrigin = `-- name: GetByOrigin :one
SELECT origin, short
FROM tiny
WHERE origin = $1
LIMIT 1
`

func (q *Queries) GetByOrigin(ctx context.Context, origin string) (Tiny, error) {
	row := q.db.QueryRowContext(ctx, getByOrigin, origin)
	var i Tiny
	err := row.Scan(&i.Origin, &i.Short)
	return i, err
}

const getByShort = `-- name: GetByShort :one
SELECT origin, short
FROM tiny
WHERE short = $1
LIMIT 1
`

func (q *Queries) GetByShort(ctx context.Context, short string) (Tiny, error) {
	row := q.db.QueryRowContext(ctx, getByShort, short)
	var i Tiny
	err := row.Scan(&i.Origin, &i.Short)
	return i, err
}
